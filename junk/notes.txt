def modeling(graph: Graph, epochs: int = 100, metric: Optional[Callable] = None, changing_factor: float = 1e-3):
    graph = copy.copy(graph)

    for epoch in range(epochs):
        edges_data = graph.edges(include_data=True)
        nodes_data = graph.nodes(include_data=True)

        for u, v in edges_data:

            actor1 = nodes_data[u].get('meaning')
            actor2 = nodes_data[v].get('meaning')

            if metric is not None:
                metric_value = metric(actor1, actor2)
            else:
                metric_value = 0.5

            if random.random() < metric_value:
                actor1 = nodes_data[u].get('meaning')
                actor2 = nodes_data[v].get('meaning')

                actor1, actor2 = dialog(actor1[0], actor2[1], changing_factor=changing_factor)

                graph.modify_node(u, meaning=[actor1, 1 - actor1])
                graph.modify_node(v, meaning=[actor2, 1 - actor2])

    return graph


function modeling(G, epochs_num, metric, changing_factor)
    for epoch from 1 to epochs_num
        for edge in graph.G

            actor1 = G.N[edge.a]
            actor2 = G.N[edge.b]

            metric_value = metric(actor1, actor2)

            if random() < metric_value:
                actor1, actor2 = dialog(actor1, actor2, changing_factor)
                G.N[edge.a] = actor1
                G.N[edge.b] = actor2

    return G
